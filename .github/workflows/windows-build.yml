name: win
run-name: ${{ github.actor }}  is building by GitHub Actions ðŸš€
on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled'
        required: false
        default: false
  push:

jobs:
  job:
    
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_DIR: ${{github.workspace}}/vcpkg
      VCPKG_COMMIT: 0fa8459cf3a7caca7adc58f992bc32ff13630684
      BUILD_TYPE: Release
      SYSTEM_LIB_DIR: ${{github.workspace}}/vcpkg/installed/${{ matrix.triplet }}
      # Generator: Ninja
    

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022]
        triplet: [x64-windows]
        include:
          - os: windows-latest
            triplet: x64-windows-static-md
            name: x64
            arch: x64
          # - os: windows-latest
          #   triplet: x86-windows
          #   name: x86
          #   arch: Win32


    steps:
      - name: Show triplet
        run: |
            echo ${{matrix.triplet}}
        shell: bash

      - uses: actions/checkout@v3
        name: Checkout

      - name: Show workspace files
        run: find . | grep -v '\.git' | grep -v vcpkg | grep -v include
        shell: bash

      - uses: lukka/get-cmake@latest
        name: Get cmake
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.3.1
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@main
        id: runvcpkg
        with:
          vcpkgDirectory: ${{ env.VCPKG_DIR }}
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT }}

      - name: Install deps
        run: |
          vcpkg install --triplet ${{matrix.triplet}} protobuf curl
          vcpkg integrate install

      # if path has \ in it, use powershell
      - name: Run build
        env:
          VCPKG_ROOT: ${{ env.VCPKG_DIR }}
        shell: pwsh
        run: |
          echo ${{env.VCPKG_ROOT}}
          ./package/windows/pkg.ps1

      - name: Set target file name
        run: echo "TARGET_FILE=release/${{matrix.triplet}}-latest.tar.gz" >> $GITHUB_ENV
        shell: bash

      - name: Compress
        uses: a7ul/tar-action@v1.1.0
        id: compress
        with:
          command: c
          cwd: ./
          outPath: ${{env.TARGET_FILE}}
          files: |
            ./out

      - name: Show release file
        run: |
          ls -lshtr ${{env.TARGET_FILE}}
        shell: bash

      - name: Test build example release
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          rm -rf build
        shell: bash
        working-directory: out

      - name: Test build example release
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Debug
          cmake --build build --config Debug
          rm -rf build
        shell: bash
        working-directory: out

      - name: Save as aritifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.triplet}}-latest-artifact
          path: ${{env.TARGET_FILE}}
          retention-days: 7
