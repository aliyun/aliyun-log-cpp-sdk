name: win
run-name: ${{ github.actor }}  is building by GitHub Actions ðŸš€
on: [workflow_dispatch, push]

jobs:
  job:
    
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_DIR: ${{github.workspace}}/vcpkg
      VCPKG_COMMIT: 0fa8459cf3a7caca7adc58f992bc32ff13630684
      BUILD_TYPE: Release
      SYSTEM_LIB_DIR: ${{github.workspace}}/vcpkg/installed/${{ matrix.triplet }}
      # Generator: Ninja
    

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        triplet: [x64-windows, x86-windows]
        # os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
            name: x64
            arch: x64
          - os: windows-latest
            triplet: x86-windows
            name: x86
            arch: Win32
          # - os: ubuntu-latest
          #   triplet: x64-linux
          # - os: macos-latest
          #   triplet: x64-osx


    steps:
      - name: Show triplet
        run: |
            echo ${{matrix.triplet}}
        shell: bash

      - uses: actions/checkout@v3
        name: Checkout

      - name: Show workspace files
        run: find . | grep -v '\.git' | grep -v vcpkg | grep -v include
        shell: bash

      - uses: lukka/get-cmake@latest
        name: Get cmake
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.3.1
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@main
        id: runvcpkg
        with:
          vcpkgDirectory: ${{ env.VCPKG_DIR }}
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT }}
          # vcpkgJsonGlob: 'vcpkg.json'
      - name: Install deps
        run: |
          vcpkg install --triplet ${{matrix.triplet}} protobuf lz4 curl
          vcpkg integrate install

      # if path has \ in it, use powershell
      - name: Cmake configure
        env:
          TOOL_CHAIN_FILE: ${{ env.VCPKG_DIR }}/scripts/buildsystems/vcpkg.cmake
        shell: pwsh
        run: |
          echo ${{env.TOOL_CHAIN_FILE}}
          cmake -A ${{ matrix.arch }} `
                -DCMAKE_GENERATOR_PLATFORM=${{ matrix.arch }} `
                -DCMAKE_TOOLCHAIN_FILE=${{env.TOOL_CHAIN_FILE}} `
                -DVCPKG_TARGET_TRIPLET=${{matrix.triplet}} `
                -DVCPKG_MANIFEST_MODE=OFF `
                -B build -DINSTALL_SAMPLE=ON `
                -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} `
                -DBUILD_SAMPLE=ON -DBUILD_TESTS=ON `
                -DVERBOSE=ON -DBUILD_SHARE_LIBS=ON  
        

      - name: Build
        run: |
          cmake --build build --clean-first --config ${{env.BUILD_TYPE}}

      - name: Install
        run: |
          cmake --install build --prefix ${{github.workspace}}
      
      # - name: test build standalone sample
      #   run:
      #     | 
      #         cmake -B build -DCMAKE_BUILD_TYPE=Release
      #         cmake --build build --clean-first --config Release
      #         rm -rf build
      #   shell: bash
      #   working-directory: ${{github.workspace}}/aliyun-log-cpp-sdk/build

      - name: Copy libs
        run: |
              mkdir -p ${{matrix.triplet}} 
                mkdir -p ${{matrix.triplet}}/bin 
                mkdir -p ${{matrix.triplet}}/lib
                cp ${{env.SYSTEM_LIB_DIR}}/bin/*.dll ./${{matrix.triplet}}/bin/
                cp ${{env.SYSTEM_LIB_DIR}}/lib/*.lib ./${{matrix.triplet}}/lib/
        working-directory:  ${{github.workspace}}/lib

      - name: Show installed files
        run: |
            ls -lshtrR lib
            ls -lshtrR bin
            ls -lshtr include
        shell: bash

      # - name: Set env
      #   run: echo "GITHUB_SHA_SHAORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV

      - name: Set target file name
        run: echo "TARGET_FILE=release/${{matrix.triplet}}-latest.tar.gz" >> $GITHUB_ENV
        shell: bash

      - name: Copy files for release
        run: |
            mkdir -p release
            mkdir -p aliyun-log-cpp-sdk
            cp -rf bin lib include cmake example test *.cpp *.h \
              *.md Makefile *.proto ./aliyun-log-cpp-sdk/
        shell: bash

      - name: Compress
        uses: a7ul/tar-action@v1.1.0
        id: compress
        with:
          command: c
          cwd: ./
          outPath: ${{env.TARGET_FILE}}
          files: |
            ./aliyun-log-cpp-sdk

      - name: Show release file
        run: |
          ls -lshtr ${{env.TARGET_FILE}}
        shell: bash

      - name: Save as aritifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.triplet}}-latest-artifact
          path: ${{env.TARGET_FILE}}
          retention-days: 7
